# Generated by Django 2.2.7 on 2019-12-31 13:28

import django.db.models.deletion
from django.db import migrations, models

import results.mixins.change_log


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0011_update_proxy_permissions"),
    ]

    operations = [
        migrations.CreateModel(
            name="Area",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100, unique=True, verbose_name="Name")),
                ("abbreviation", models.CharField(max_length=100, unique=True, verbose_name="Abbreviation")),
            ],
            options={
                "verbose_name": "Area",
                "verbose_name_plural": "Areas",
                "ordering": ["name"],
            },
            bases=(results.mixins.change_log.LogChangesMixing, models.Model),
        ),
        migrations.CreateModel(
            name="Athlete",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("first_name", models.CharField(max_length=100, verbose_name="First name")),
                ("last_name", models.CharField(max_length=100, verbose_name="Last name")),
                (
                    "sport_id",
                    models.CharField(blank=True, max_length=15, null=True, unique=True, verbose_name="Sport ID"),
                ),
                ("date_of_birth", models.DateField(blank=True, null=True, verbose_name="Date of birth")),
                (
                    "gender",
                    models.CharField(
                        choices=[("M", "Man"), ("W", "Woman"), ("O", "Other"), ("U", "Unknown")],
                        max_length=1,
                        verbose_name="Gender",
                    ),
                ),
            ],
            options={
                "verbose_name": "Athlete",
                "verbose_name_plural": "Athletes",
            },
            bases=(results.mixins.change_log.LogChangesMixing, models.Model),
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
                ("abbreviation", models.CharField(max_length=15, verbose_name="Abbreviation")),
                ("max_age", models.SmallIntegerField(blank=True, null=True, verbose_name="Maximum age")),
                ("min_age", models.SmallIntegerField(blank=True, null=True, verbose_name="Minimum age")),
                (
                    "age_exact",
                    models.BooleanField(default=False, verbose_name="Age limit checked by the exact day, not year"),
                ),
                ("team", models.BooleanField(default=False, verbose_name="Team category")),
                ("team_size", models.SmallIntegerField(blank=True, null=True, verbose_name="Number of team members")),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[("M", "Man"), ("W", "Woman"), ("O", "Other")],
                        max_length=1,
                        null=True,
                        verbose_name="Gender",
                    ),
                ),
                ("order", models.SmallIntegerField(default=0, verbose_name="Order")),
                ("historical", models.BooleanField(default=False, verbose_name="Historical")),
            ],
            options={
                "verbose_name": "Category",
                "verbose_name_plural": "Categories",
                "ordering": ["sport", "order", "team", "name"],
            },
            bases=(results.mixins.change_log.LogChangesMixing, models.Model),
        ),
        migrations.CreateModel(
            name="Competition",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255, verbose_name="Name")),
                ("description", models.TextField(blank=True, verbose_name="Description")),
                ("date_start", models.DateField(verbose_name="Start date")),
                ("date_end", models.DateField(verbose_name="End date")),
                ("location", models.CharField(max_length=255, verbose_name="Location")),
                ("layout", models.SmallIntegerField(default=1, verbose_name="Layout type")),
                ("locked", models.BooleanField(default=False, verbose_name="Edit lock")),
                ("public", models.BooleanField(default=False, verbose_name="Public")),
                ("trial", models.BooleanField(default=False, verbose_name="Trial competition")),
            ],
            options={
                "verbose_name": "Competition",
                "verbose_name_plural": "Competitions",
                "ordering": ["-date_start", "name"],
            },
            bases=(results.mixins.change_log.LogChangesMixing, models.Model),
        ),
        migrations.CreateModel(
            name="CompetitionLevel",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
                ("abbreviation", models.CharField(max_length=15, unique=True, verbose_name="Abbreviation")),
                ("order", models.SmallIntegerField(default=0, verbose_name="Order")),
                ("requirements", models.CharField(blank=True, max_length=100, verbose_name="Requirements")),
                ("historical", models.BooleanField(default=False, verbose_name="Historical")),
            ],
            options={
                "verbose_name": "Competition level",
                "verbose_name_plural": "Competition levels",
                "ordering": ["order", "name"],
            },
            bases=(results.mixins.change_log.LogChangesMixing, models.Model),
        ),
        migrations.CreateModel(
            name="CompetitionResultType",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=15, verbose_name="Name")),
                ("abbreviation", models.CharField(max_length=10, verbose_name="Abbreviation")),
                ("max_result", models.SmallIntegerField(blank=True, null=True, verbose_name="Maximum result")),
                ("min_result", models.SmallIntegerField(blank=True, null=True, verbose_name="Minimum result")),
                ("records", models.BooleanField(default=True, verbose_name="Check records")),
            ],
            options={
                "verbose_name": "Result type",
                "verbose_name_plural": "Result types",
                "ordering": ["competition_type", "name"],
            },
            bases=(results.mixins.change_log.LogChangesMixing, models.Model),
        ),
        migrations.CreateModel(
            name="CompetitionType",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
                ("abbreviation", models.CharField(max_length=15, verbose_name="Abbreviation")),
                ("number_of_rounds", models.SmallIntegerField(verbose_name="Number of rounds")),
                ("max_result", models.SmallIntegerField(blank=True, null=True, verbose_name="Maximum result")),
                ("min_result", models.SmallIntegerField(blank=True, null=True, verbose_name="Minimum result")),
                ("order", models.SmallIntegerField(default=0, verbose_name="Order")),
                ("requirements", models.CharField(blank=True, max_length=100, verbose_name="Requirements")),
                ("personal", models.BooleanField(default=True, verbose_name="Personal competition")),
                ("team", models.BooleanField(default=True, verbose_name="Team competition")),
                ("layout", models.SmallIntegerField(default=1, verbose_name="Layout type")),
                ("historical", models.BooleanField(default=False, verbose_name="Historical")),
            ],
            options={
                "verbose_name": "Competition type",
                "verbose_name_plural": "Competition types",
                "ordering": ["sport", "order", "name"],
            },
            bases=(results.mixins.change_log.LogChangesMixing, models.Model),
        ),
        migrations.CreateModel(
            name="Division",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
                ("abbreviation", models.CharField(max_length=15, verbose_name="Abbreviation")),
                ("historical", models.BooleanField(default=False, verbose_name="Historical")),
            ],
            options={
                "verbose_name": "Division",
                "verbose_name_plural": "Division",
                "ordering": ["name"],
            },
            bases=(results.mixins.change_log.LogChangesMixing, models.Model),
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100, unique=True, verbose_name="Name")),
                ("abbreviation", models.CharField(max_length=100, verbose_name="Abbreviation")),
                ("external", models.BooleanField(default=False, verbose_name="External")),
                ("areas", models.ManyToManyField(blank=True, to="results.Area", verbose_name="Areas")),
                (
                    "group",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="auth.Group",
                        verbose_name="Group",
                    ),
                ),
            ],
            options={
                "verbose_name": "Organization",
                "verbose_name_plural": "Organizations",
                "ordering": ["name"],
            },
            bases=(results.mixins.change_log.LogChangesMixing, models.Model),
        ),
        migrations.CreateModel(
            name="Result",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("first_name", models.CharField(blank=True, max_length=100, null=True, verbose_name="First name")),
                ("last_name", models.CharField(blank=True, max_length=100, null=True, verbose_name="Last name")),
                (
                    "result",
                    models.DecimalField(blank=True, decimal_places=2, max_digits=11, null=True, verbose_name="Result"),
                ),
                ("result_code", models.CharField(blank=True, max_length=3, verbose_name="Result code")),
                ("decimals", models.SmallIntegerField(default=0, verbose_name="Result decimals")),
                ("position", models.SmallIntegerField(blank=True, null=True, verbose_name="Position")),
                ("position_pre", models.SmallIntegerField(blank=True, null=True, verbose_name="Preliminary position")),
                ("approved", models.BooleanField(default=False, verbose_name="Approved")),
                (
                    "info",
                    models.CharField(blank=True, max_length=100, null=True, verbose_name="Additional information"),
                ),
                (
                    "admin_info",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="Administrational information"
                    ),
                ),
                ("team", models.BooleanField(default=False, verbose_name="Team result")),
                (
                    "athlete",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="results_athlete",
                        to="results.Athlete",
                    ),
                ),
                ("category", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="results.Category")),
                (
                    "competition",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="results_competition",
                        to="results.Competition",
                    ),
                ),
                (
                    "elimination_category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="eliminiation_category",
                        to="results.Category",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to="results.Organization"
                    ),
                ),
                (
                    "team_members",
                    models.ManyToManyField(blank=True, related_name="team_members", to="results.Athlete"),
                ),
            ],
            options={
                "verbose_name": "Result",
                "verbose_name_plural": "Results",
                "ordering": ["competition", "category", "position", "-result"],
            },
            bases=(results.mixins.change_log.LogChangesMixing, models.Model),
        ),
        migrations.CreateModel(
            name="Sport",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
                ("abbreviation", models.CharField(max_length=15, verbose_name="Abbreviation")),
                ("order", models.SmallIntegerField(default=0, verbose_name="Order")),
                ("historical", models.BooleanField(default=False, verbose_name="Historical")),
            ],
            options={
                "verbose_name": "Sport",
                "verbose_name_plural": "Sports",
                "ordering": ["order"],
            },
            bases=(results.mixins.change_log.LogChangesMixing, models.Model),
        ),
        migrations.CreateModel(
            name="ResultPartial",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("order", models.SmallIntegerField(verbose_name="Order")),
                ("value", models.DecimalField(decimal_places=1, max_digits=10, verbose_name="Value")),
                ("decimals", models.SmallIntegerField(default=0, verbose_name="Value decimals")),
                ("time", models.DateTimeField(blank=True, null=True, verbose_name="Time")),
                (
                    "result",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="partial", to="results.Result"
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="result_type",
                        to="results.CompetitionResultType",
                    ),
                ),
            ],
            options={
                "verbose_name": "Partial result",
                "verbose_name_plural": "Partial results",
                "ordering": ["result", "type", "order"],
            },
            bases=(results.mixins.change_log.LogChangesMixing, models.Model),
        ),
        migrations.CreateModel(
            name="RecordLevel",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
                ("abbreviation", models.CharField(max_length=15, verbose_name="Abbreviation")),
                ("base", models.BooleanField(default=True, verbose_name="Base results")),
                ("partial", models.BooleanField(default=False, verbose_name="Partial results")),
                ("personal", models.BooleanField(default=True, verbose_name="Personal")),
                ("team", models.BooleanField(default=False, verbose_name="Team")),
                ("decimals", models.BooleanField(default=False, verbose_name="Decimals")),
                ("order", models.SmallIntegerField(default=0, verbose_name="Order")),
                ("historical", models.BooleanField(default=False, verbose_name="Historical")),
                (
                    "area",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="results.Area",
                        verbose_name="Area",
                    ),
                ),
                ("levels", models.ManyToManyField(to="results.CompetitionLevel")),
                ("types", models.ManyToManyField(to="results.CompetitionType")),
            ],
            options={
                "verbose_name": "Record level",
                "verbose_name_plural": "Record levels",
                "ordering": ["order", "name"],
            },
            bases=(results.mixins.change_log.LogChangesMixing, models.Model),
        ),
        migrations.CreateModel(
            name="Record",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("approved", models.BooleanField(default=False, verbose_name="Approved")),
                ("date_start", models.DateField(verbose_name="Start date")),
                ("date_end", models.DateField(blank=True, null=True, verbose_name="End date")),
                ("info", models.TextField(blank=True, verbose_name="Info")),
                ("historical", models.BooleanField(default=False, verbose_name="Historical")),
                ("category", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="results.Category")),
                ("level", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="results.RecordLevel")),
                (
                    "partial_result",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="record_partial",
                        to="results.ResultPartial",
                    ),
                ),
                (
                    "result",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="record", to="results.Result"
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="record_type",
                        to="results.CompetitionType",
                    ),
                ),
            ],
            options={
                "verbose_name": "Record",
                "verbose_name_plural": "Records",
                "ordering": ["type", "result"],
            },
            bases=(results.mixins.change_log.LogChangesMixing, models.Model),
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255, verbose_name="Name")),
                ("description", models.TextField(blank=True, verbose_name="Description")),
                ("date_start", models.DateField(verbose_name="Start date")),
                ("date_end", models.DateField(verbose_name="End date")),
                ("location", models.CharField(max_length=255, verbose_name="Location")),
                ("locked", models.BooleanField(default=False, verbose_name="Edit lock")),
                ("public", models.BooleanField(default=False, verbose_name="Public")),
                (
                    "organization",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to="results.Organization"
                    ),
                ),
            ],
            options={
                "verbose_name": "Event",
                "verbose_name_plural": "Events",
                "ordering": ["-date_start", "name"],
            },
            bases=(results.mixins.change_log.LogChangesMixing, models.Model),
        ),
        migrations.AddField(
            model_name="competitiontype",
            name="sport",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="results.Sport"
            ),
        ),
        migrations.AddField(
            model_name="competitionresulttype",
            name="competition_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="competition_type",
                to="results.CompetitionType",
            ),
        ),
        migrations.CreateModel(
            name="CompetitionLayout",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("type", models.SmallIntegerField(verbose_name="Layout type")),
                ("label", models.CharField(max_length=100, verbose_name="Label")),
                ("name", models.CharField(max_length=15, verbose_name="Result type name")),
                ("block", models.SmallIntegerField(verbose_name="Block")),
                ("row", models.SmallIntegerField(verbose_name="Row")),
                ("col", models.SmallIntegerField(verbose_name="Column")),
                ("order", models.SmallIntegerField(blank=True, null=True, verbose_name="Order")),
                (
                    "hide",
                    models.CharField(
                        blank=True,
                        choices=[("sm", "Small"), ("md", "Medium"), ("lg", "Large"), ("xl", "Extra large")],
                        max_length=3,
                        verbose_name="Hide on smaller screen",
                    ),
                ),
                (
                    "show",
                    models.CharField(
                        blank=True,
                        choices=[("sm", "Small"), ("md", "Medium"), ("lg", "Large"), ("xl", "Extra large")],
                        max_length=3,
                        verbose_name="Show on larger screen",
                    ),
                ),
            ],
            options={
                "verbose_name": "Competition layout",
                "verbose_name_plural": "Competition layouts",
                "ordering": ["type", "block", "row", "col", "order"],
                "unique_together": {("type", "block", "row", "col")},
            },
            bases=(results.mixins.change_log.LogChangesMixing, models.Model),
        ),
        migrations.AddField(
            model_name="competition",
            name="event",
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="results.Event"),
        ),
        migrations.AddField(
            model_name="competition",
            name="level",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="results.CompetitionLevel"),
        ),
        migrations.AddField(
            model_name="competition",
            name="organization",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, to="results.Organization"
            ),
        ),
        migrations.AddField(
            model_name="competition",
            name="type",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="results.CompetitionType"),
        ),
        migrations.CreateModel(
            name="CategoryForCompetitionType",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("max_result", models.SmallIntegerField(blank=True, null=True, verbose_name="Maximum result")),
                ("min_result", models.SmallIntegerField(blank=True, null=True, verbose_name="Minimum result")),
                (
                    "disallow",
                    models.BooleanField(default=False, verbose_name="Disallow category for this competition type"),
                ),
                ("check_record", models.BooleanField(default=True, verbose_name="Check records")),
                ("record_group", models.SmallIntegerField(blank=True, null=True, verbose_name="Record group")),
                ("category", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="results.Category")),
                ("type", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="results.CompetitionType")),
            ],
            options={
                "verbose_name": "Competition type and category check",
                "verbose_name_plural": "Competition type and category checks",
                "ordering": ["type", "category"],
            },
            bases=(results.mixins.change_log.LogChangesMixing, models.Model),
        ),
        migrations.AddField(
            model_name="category",
            name="division",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="results.Division"
            ),
        ),
        migrations.AddField(
            model_name="category",
            name="sport",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="results.Sport"
            ),
        ),
        migrations.CreateModel(
            name="AthleteInformation",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("type", models.CharField(max_length=100, verbose_name="Type")),
                ("value", models.CharField(max_length=100, verbose_name="Value")),
                ("date_start", models.DateField(blank=True, null=True, verbose_name="Start date")),
                ("date_end", models.DateField(blank=True, null=True, verbose_name="End date")),
                ("public", models.BooleanField(default=False, verbose_name="Public")),
                (
                    "athlete",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="info", to="results.Athlete"
                    ),
                ),
            ],
            bases=(results.mixins.change_log.LogChangesMixing, models.Model),
        ),
        migrations.AddField(
            model_name="athlete",
            name="additional_organizations",
            field=models.ManyToManyField(
                blank=True, related_name="additional_organizations", to="results.Organization"
            ),
        ),
        migrations.AddField(
            model_name="athlete",
            name="organization",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, to="results.Organization"
            ),
        ),
        migrations.AddIndex(
            model_name="resultpartial",
            index=models.Index(fields=["result", "type", "order"], name="results_res_result__f7ef18_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="resultpartial",
            unique_together={("result", "type", "order")},
        ),
        migrations.AlterUniqueTogether(
            name="recordlevel",
            unique_together={("name", "abbreviation")},
        ),
        migrations.AlterUniqueTogether(
            name="organization",
            unique_together={("name", "abbreviation")},
        ),
    ]
